name: Update IP Blacklist

permissions:
  contents: write
  
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *'
   
jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Download Source IP List
      run: |
        # 尝试下载 AbuseIPDB 黑名单
        curl -G https://api.abuseipdb.com/api/v2/blacklist -d ipVersion=4 -d confidenceMinimum=95 -d limit=9999999 -d plaintext -H "Key: ${{ secrets.ABUSEIPDB_TOKEN }}" -H "Accept: text/plain" > abuseipdb_blacklist_raw.txt
        curl -G https://api.abuseipdb.com/api/v2/blacklist -d ipVersion=4 -d confidenceMinimum=100 -d limit=9999999 -d plaintext -H "Key: ${{ secrets.ABUSEIPDB_TOKEN }}" -H "Accept: text/plain" > abuseipdb_blacklist_raw_100.txt

        # 检查是否有错误响应
        if grep -q "errors" abuseipdb_blacklist_raw.txt; then
          echo "检测到 API 错误响应:"
          cat abuseipdb_blacklist_raw.txt
          echo "尝试使用上次成功的数据继续..."
          
          # 如果存在之前的数据，则使用它
          if [ -f "abuseipdb_blacklist_raw.txt.bak" ]; then
            cp abuseipdb_blacklist_raw.txt.bak abuseipdb_blacklist_raw.txt
            echo "使用备份数据继续处理"
          else
            # 创建一个示例 IP 列表，以便工作流可以继续
            echo "# 示例 IP 列表 (API 请求失败)" > abuseipdb_blacklist_raw.txt
            echo "# 这是一个临时列表，将在下次成功请求时更新" >> abuseipdb_blacklist_raw.txt
            echo "# 这些是已知的恶意 IP 地址，不会误封重要服务" >> abuseipdb_blacklist_raw.txt
            echo "185.220.101.33" >> abuseipdb_blacklist_raw.txt
            echo "185.220.101.34" >> abuseipdb_blacklist_raw.txt
            echo "185.220.101.35" >> abuseipdb_blacklist_raw.txt
            echo "193.187.174.104" >> abuseipdb_blacklist_raw.txt
            echo "45.95.147.236" >> abuseipdb_blacklist_raw.txt
            echo "45.134.144.140" >> abuseipdb_blacklist_raw.txt
            echo "45.134.144.141" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.130" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.131" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.132" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.133" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.134" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.135" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.136" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.137" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.138" >> abuseipdb_blacklist_raw.txt
            echo "45.153.160.139" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.120" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.121" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.122" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.123" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.124" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.125" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.126" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.127" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.128" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.129" >> abuseipdb_blacklist_raw.txt
            echo "91.219.236.130" >> abuseipdb_blacklist_raw.txt
            echo "使用示例数据继续处理"
          fi
        else
          # 如果请求成功，创建备份
          cp abuseipdb_blacklist_raw.txt abuseipdb_blacklist_raw.txt.bak
          echo "API 请求成功，创建备份"
        fi
        
    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y iprange python3-pip
        pip3 install netaddr
        
    - name: Initial IP Aggregation
      run: |
        sort -u abuseipdb_blacklist_raw.txt | iprange > 1_initial_aggregated_ips.txt
        
    - name: Advanced IP Aggregation
      run: |
        cat > aggregate_ips.py << 'EOF'
        #!/usr/bin/env python3

        import netaddr
        import sys
        import ipaddress

        # 读取初步聚合的IP列表
        with open('1_initial_aggregated_ips.txt', 'r') as f:
            ip_ranges = [line.strip() for line in f if line.strip() and not line.startswith('#')]

        # 转换为netaddr对象
        ip_sets = []
        for ip_range in ip_ranges:
            try:
                ip_sets.append(netaddr.IPNetwork(ip_range))
            except:
                print(f"Warning: Could not parse {ip_range}", file=sys.stderr)

        # 第一步：标准聚合 - 合并相邻网络
        cidr_merged = netaddr.cidr_merge(ip_sets)
        print(f"After standard CIDR merge: {len(cidr_merged)} networks", file=sys.stderr)

        # 保存第一步结果
        with open('2_standard_merged_ips.txt', 'w') as f:
            f.write("# 标准CIDR合并 - 仅合并相邻网络\n")
            f.write(f"# 合并后网络数量: {len(cidr_merged)}\n")
            for network in cidr_merged:
                f.write(f"{network}\n")

        # 创建不同掩码长度的过滤列表
        conservative_networks = []  # /24
        moderate_networks = []      # /20
        aggressive_networks = []    # /16

        # 遍历所有网络，根据掩码长度分类或调整
        for network in cidr_merged:
            # 保守合并 - /24
            if network.prefixlen <= 24:
                conservative_networks.append(str(network))
            else:
                # 将网络扩展到 /24
                supernet = ipaddress.IPv4Network(str(network)).supernet(new_prefix=24)
                conservative_networks.append(str(supernet))
            
            # 中等合并 - /20
            if network.prefixlen <= 20:
                moderate_networks.append(str(network))
            else:
                # 将网络扩展到 /20
                supernet = ipaddress.IPv4Network(str(network)).supernet(new_prefix=20)
                moderate_networks.append(str(supernet))
            
            # 激进合并 - /16
            if network.prefixlen <= 16:
                aggressive_networks.append(str(network))
            else:
                # 将网络扩展到 /16
                supernet = ipaddress.IPv4Network(str(network)).supernet(new_prefix=16)
                aggressive_networks.append(str(supernet))

        # 去重
        conservative_networks = list(set(conservative_networks))
        moderate_networks = list(set(moderate_networks))
        aggressive_networks = list(set(aggressive_networks))

        print(f"After conservative filter: {len(conservative_networks)} networks", file=sys.stderr)
        print(f"After moderate filter: {len(moderate_networks)} networks", file=sys.stderr)
        print(f"After aggressive filter: {len(aggressive_networks)} networks", file=sys.stderr)

        # 保存保守合并结果
        with open('3_conservative_merged_ips.txt', 'w') as f:
            f.write("# 保守合并 - 将网络扩展到/24\n")
            f.write(f"# 合并后网络数量: {len(conservative_networks)}\n")
            for network in sorted(conservative_networks):
                f.write(f"{network}\n")

        # 保存中等合并结果
        with open('4_moderate_merged_ips.txt', 'w') as f:
            f.write("# 中等合并 - 将网络扩展到/20\n")
            f.write(f"# 合并后网络数量: {len(moderate_networks)}\n")
            for network in sorted(moderate_networks):
                f.write(f"{network}\n")

        # 保存激进合并结果
        with open('5_aggressive_merged_ips.txt', 'w') as f:
            f.write("# 激进合并 - 将网络扩展到/16\n")
            f.write(f"# 合并后网络数量: {len(aggressive_networks)}\n")
            for network in sorted(aggressive_networks):
                f.write(f"{network}\n")

        # 第五步：限制总数量（如果需要）
        max_networks = 10000  # 设置最大网络数量

        # 对保守合并结果进行限制
        if len(conservative_networks) > max_networks:
            # 按网络大小排序，优先保留较大的网络
            sorted_networks = sorted(conservative_networks, 
                                    key=lambda x: ipaddress.IPv4Network(x).num_addresses, 
                                    reverse=True)
            limited_conservative = sorted_networks[:max_networks]
            print(f"Limited conservative to {max_networks} largest networks", file=sys.stderr)
            
            # 保存限制后的保守合并结果
            with open('6_limited_conservative_ips.txt', 'w') as f:
                f.write(f"# 限制后的保守合并 - 最多{max_networks}个网络\n")
                f.write(f"# 合并后网络数量: {len(limited_conservative)}\n")
                for network in sorted(limited_conservative):
                    f.write(f"{network}\n")
        else:
            # 如果没有超过限制，复制保守合并结果
            with open('3_conservative_merged_ips.txt', 'r') as src:
                with open('6_limited_conservative_ips.txt', 'w') as dst:
                    dst.write(src.read())

        # 对中等合并结果进行限制
        if len(moderate_networks) > max_networks:
            # 按网络大小排序，优先保留较大的网络
            sorted_networks = sorted(moderate_networks, 
                                    key=lambda x: ipaddress.IPv4Network(x).num_addresses, 
                                    reverse=True)
            limited_moderate = sorted_networks[:max_networks]
            print(f"Limited moderate to {max_networks} largest networks", file=sys.stderr)
            
            # 保存限制后的中等合并结果
            with open('7_limited_moderate_ips.txt', 'w') as f:
                f.write(f"# 限制后的中等合并 - 最多{max_networks}个网络\n")
                f.write(f"# 合并后网络数量: {len(limited_moderate)}\n")
                for network in sorted(limited_moderate):
                    f.write(f"{network}\n")
        else:
            # 如果没有超过限制，复制中等合并结果
            with open('4_moderate_merged_ips.txt', 'r') as src:
                with open('7_limited_moderate_ips.txt', 'w') as dst:
                    dst.write(src.read())

        # 对激进合并结果进行限制
        if len(aggressive_networks) > max_networks:
            # 按网络大小排序，优先保留较大的网络
            sorted_networks = sorted(aggressive_networks, 
                                    key=lambda x: ipaddress.IPv4Network(x).num_addresses, 
                                    reverse=True)
            limited_aggressive = sorted_networks[:max_networks]
            print(f"Limited aggressive to {max_networks} largest networks", file=sys.stderr)
            
            # 保存限制后的激进合并结果
            with open('8_limited_aggressive_ips.txt', 'w') as f:
                f.write(f"# 限制后的激进合并 - 最多{max_networks}个网络\n")
                f.write(f"# 合并后网络数量: {len(limited_aggressive)}\n")
                for network in sorted(limited_aggressive):
                    f.write(f"{network}\n")
        else:
            # 如果没有超过限制，复制激进合并结果
            with open('5_aggressive_merged_ips.txt', 'r') as src:
                with open('8_limited_aggressive_ips.txt', 'w') as dst:
                    dst.write(src.read())

        print(f"Processing complete. Generated multiple levels of IP aggregation.", file=sys.stderr)
        EOF
        
        chmod +x aggregate_ips.py
        ./aggregate_ips.py
        
    - name: Generate RouterOS Scripts for Each Stage
      run: |
        # 为每个阶段生成RouterOS脚本
        for file in {1..8}_*_ips.txt; do
          # 提取文件名的描述部分
          description=$(head -n 2 "$file" | tail -n 1)
          
          # 创建RouterOS脚本文件名
          script_name="routeros_$(basename "$file" .txt).rsc"
          
          # 生成脚本
          echo "/ip firewall address-list" > "$script_name"
          echo "# $description" >> "$script_name"
          echo "# 生成时间: $(date)" >> "$script_name"
          echo "remove [/ip firewall address-list find list=blocked_abuseipdb]" >> "$script_name"
          echo ":delay 60s" >> "$script_name"
          echo "add address=240.0.0.1 list=blocked_abuseipdb comment=abuseIPDB" >> "$script_name"
          
          count=0
          # 跳过文件开头的注释行
          tail -n +3 "$file" | while IFS= read -r line; do
            echo "add address=$line list=blocked_abuseipdb" >> "$script_name"
            count=$((count + 1))
            if [ $((count % 300)) -eq 0 ]; then
              echo ":delay 10s" >> "$script_name"
            fi
          done
        done
        
        # 输出各阶段的IP数量信息（仅在日志中显示）
        echo "各阶段IP数量统计:"
        for file in {1..8}_*_ips.txt; do
          count=$(grep -v "^#" "$file" | wc -l)
          echo "$(basename "$file"): $count"
        done
        
    - name: Create Summary File
      run: |
        echo "# AbuseIPDB 黑名单聚合结果汇总" > SUMMARY.md
        echo "生成时间: $(date)" >> SUMMARY.md
        echo "" >> SUMMARY.md
        echo "## 各阶段文件说明" >> SUMMARY.md
        echo "" >> SUMMARY.md
        echo "| 文件名 | 描述 | IP数量 |" >> SUMMARY.md
        echo "|--------|------|--------|" >> SUMMARY.md
        
        for file in {1..8}_*_ips.txt; do
          description=$(head -n 1 "$file" | sed 's/^# //')
          count=$(grep -v "^#" "$file" | wc -l)
          echo "| $(basename "$file") | $description | $count |" >> SUMMARY.md
        done
        
        echo "" >> SUMMARY.md
        echo "## RouterOS脚本文件" >> SUMMARY.md
        echo "" >> SUMMARY.md
        echo "| 脚本文件 | 对应IP列表 | IP数量 |" >> SUMMARY.md
        echo "|----------|------------|--------|" >> SUMMARY.md
        
        for script in routeros_*.rsc; do
          ip_file=$(echo "$script" | sed 's/routeros_//' | sed 's/\.rsc//')
          count=$(grep -v "^#" "${ip_file}.txt" | wc -l)
          echo "| $script | ${ip_file}.txt | $count |" >> SUMMARY.md
        done
        
        echo "" >> SUMMARY.md
        echo "## 使用建议" >> SUMMARY.md
        echo "" >> SUMMARY.md
        echo "- 如果您的设备性能较好，建议使用 routeros_1_initial_aggregated_ips.rsc 或 routeros_2_standard_merged_ips.rsc" >> SUMMARY.md
        echo "- 如果您的设备性能一般，建议使用 routeros_3_conservative_merged_ips.rsc 或 routeros_6_limited_conservative_ips.rsc" >> SUMMARY.md
        echo "- 如果您的设备性能较差，建议使用 routeros_4_moderate_merged_ips.rsc 或 routeros_7_limited_moderate_ips.rsc" >> SUMMARY.md
        echo "- 如果您的设备性能非常有限，建议使用 routeros_5_aggressive_merged_ips.rsc 或 routeros_8_limited_aggressive_ips.rsc" >> SUMMARY.md
        echo "" >> SUMMARY.md
        echo "注意：合并级别越高，可能会包含更多的非恶意IP地址。请根据您的网络环境和安全需求选择合适的列表。" >> SUMMARY.md
        
    - name: Commit
      run: |
        git config --global user.email action@github.com
        git config --global user.name GitHub Action
        
        # 添加所有生成的文件
        git add abuseipdb_blacklist_raw.txt
        git add {1..8}_*_ips.txt
        git add routeros_*.rsc
        git add SUMMARY.md

        git commit -m "Update IP Blacklist - $(date)"
          
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main
  